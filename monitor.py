import asyncio
import html

# import logging
from urllib.parse import urlparse

# –Ω–∞—Å—Ç—Ä–æ–π –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–≥–ª–æ–±–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞)
# logging.basicConfig(level=logging.INFO)


# async def monitor_servers(bot):
#     await asyncio.sleep(10)
#
#     while True:
#         try:
#             import sqlite3
#             from database import get_servers
#             from services.xui_api import get_server_stats_raw
#
#             with sqlite3.connect("servers.db") as conn:
#                 cur = conn.execute("SELECT DISTINCT chat_id FROM servers")
#                 chat_ids = [row[0] for row in cur.fetchall()]
#
#             for chat_id in chat_ids:
#                 servers = get_servers(chat_id)
#                 for _, url in servers:
#                     try:
#                         stats = await get_server_stats_raw(url)
#
#                         alert_reasons = []
#                         if stats["online"] < 10:
#                             alert_reasons.append("üü• –û–Ω–ª–∞–π–Ω < 10")
#                         if stats["expired"] > 10:
#                             alert_reasons.append("üü® –ò—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π > 10")
#
#                         if alert_reasons:
#                             parsed_url = urlparse(url)
#                             short_name = parsed_url.hostname  # –¥–∞—Å—Ç 'nl-1.thetopvpn.ru'
#
#                             text = (
#                                     f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: <b>{html.escape(short_name)}</b>\n"
#                                     f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
#                                     f"üë• –í—Å–µ–≥–æ: <b>{stats['total']}</b>\n"
#                                     f"üü¢ –û–Ω–ª–∞–π–Ω: <b>{stats['online']}</b>\n"
#                                     f"‚åõ –ò—Å—Ç–µ–∫–ª–æ: <b>{stats['expired']}</b>\n"
#                                     f"\n–ü—Ä–∏—á–∏–Ω—ã:\n" + "\n".join([html.escape(reason) for reason in alert_reasons])
#                             )
#                             await bot.send_message(chat_id, text, parse_mode="HTML")
#
#                     except Exception as e:
#                         safe_url = html.escape(url)
#                         safe_error = html.escape(str(e))
#                         # logging.error(f"[monitor error] URL: {url} | Exception: {e}")
#                         await bot.send_message(
#                             chat_id,
#                             f"üö´ <b>{safe_url}</b>\n–û—à–∏–±–∫–∞: <code>{safe_error}</code>",
#                             parse_mode="HTML"
#                         )
#
#         except Exception as err:
#             print(f"[monitor error] {err}")
#
#         await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç


async def monitor_servers(bot):
    failed_once = {}  # –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ monitor_servers
    await asyncio.sleep(10)

    while True:
        try:
            import sqlite3
            from database import get_servers
            from services.xui_api import get_server_stats_raw

            with sqlite3.connect("servers.db") as conn:
                cur = conn.execute("SELECT DISTINCT chat_id FROM servers")
                chat_ids = [row[0] for row in cur.fetchall()]

            for chat_id in chat_ids:
                servers = get_servers(chat_id)
                for _, url in servers:
                    key = (chat_id, url)

                    try:
                        stats = await get_server_stats_raw(url)

                        # –û—á–∏—Å—Ç–∏—Ç—å —Ñ–ª–∞–≥ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ
                        if key in failed_once:
                            del failed_once[key]

                        alert_reasons = []
                        if stats["online"] < 10:
                            alert_reasons.append("üü• –û–Ω–ª–∞–π–Ω < 10")
                        if stats["expired"] > 10:
                            alert_reasons.append("üü® –ò—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π > 10")

                        if alert_reasons:
                            from urllib.parse import urlparse
                            short_name = urlparse(url).hostname
                            text = (
                                f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: <b>{html.escape(short_name)}</b>\n"
                                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                                f"üë• –í—Å–µ–≥–æ: <b>{stats['total']}</b>\n"
                                f"üü¢ –û–Ω–ª–∞–π–Ω: <b>{stats['online']}</b>\n"
                                f"‚åõ –ò—Å—Ç–µ–∫–ª–æ: <b>{stats['expired']}</b>\n"
                                f"\n–ü—Ä–∏—á–∏–Ω—ã:\n" + "\n".join([html.escape(r) for r in alert_reasons])
                            )
                            await bot.send_message(chat_id, text, parse_mode="HTML")

                    except Exception as e:
                        if key not in failed_once:
                            failed_once[key] = asyncio.create_task(
                                schedule_retry(bot, chat_id, url, e)
                            )

        except Exception as err:
            print(f"[monitor error] {err}")

        await asyncio.sleep(600)
